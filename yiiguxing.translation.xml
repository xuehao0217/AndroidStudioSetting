<application>
  <component name="AppStorage">
    <option name="newTranslationDialogX" value="650" />
    <option name="newTranslationDialogY" value="-608" />
    <histories>
      <item value="产品" />
      <item value="明星产品" />
      <item value="明星cha'bo" />
      <item value="明星" />
      <item value="mingxing" />
      <item value="服务&#10;" />
      <item value="新闻&#10;" />
      <item value="xin" />
      <item value="混淆&#10;" />
      <item value="datauser_de0com.android.permissioncontrollerfilesdelayed_restore_permissions.xml: open failed: ENOENT (No such file or directory)" />
      <item value="最终" />
      <item value="最终&#10;、" />
      <item value="com.networking.error.ANError: java.net.ProtocolException: Unexpected status line: 7ce8" />
      <item value="Duplicate resources" />
      <item value="com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected a string but was BEGIN_ARRAY at line 1 column 60917 path .live_video.list[1].img" />
      <item value="bbsmodule_home: push dev_825 to origindev_825 was rejected by remote" />
      <item value="Fatal signal 11 (SIGSEGV), code -6 (SI_TKILL) in tid 15752 (RenderThread), pid 15520 (iang.soyoungapp)" />
      <item value="beginning of crash" />
      <item value="Parameter specified as non-null is null: method kotlin.jvm.internal.Intrinsics.checkNotNullParameter, parameter v" />
      <item value="on Shown" />
      <item value="com.networking.error.ANError: java.net.UnknownHostException: Unable to resolve host &quot;api66.sy.soyoung.com&quot;: No address associated with hostname" />
      <item value="empty String" />
      <item value="deviceData.getInstallData(&quot;new_index_user_tool&quot;, NewUserIndexTool::class.java)" />
      <item value="get Install Data" />
      <item value="EVENT DIALOG SHOW CHANGED" />
      <item value="搜索&#10;" />
      <item value="helper.getAdapterPosition() == 0 &amp;&amp; isSetData &amp;&amp; item.title.contains(&quot;新氧魔镜&quot;)" />
      <item value="需要" />
      <item value="read diary calendar 2" />
      <item value="calendar nursing detail" />
      <item value="calendar create comfire" />
      <item value="activity video diagnose project list" />
      <item value="diary pics" />
      <item value="scale" />
      <item value="Unable to parse composition" />
      <item value="new user area product head" />
      <item value="product detail" />
      <item value="展示过&#10;" />
      <item value="home display search guide" />
      <item value="on Low Memory" />
      <item value="java.lang.IllegalStateException: Unable to parse composition" />
      <item value="方案&#10;" />
      <item value="fang" />
      <item value="Equivalent to {@link convert(long, TimeUnit) MILLISECONDS.convert(duration, this)}. @param duration the duration @return the converted duration, or {@code Long.MIN_VALUE} if conversion would negatively overflow, or {@code Long.MAX_VALUE} if it would positively overflow." />
      <item value="Maintains fixed delay between produced elements if consumer cannot keep up or it otherwise slow." />
      <item value="A `Job` instance in the [coroutineContext](https:kotlinlang.orgapilatestjvmstdlibkotlin.coroutinescoroutine-context.html) represents the coroutine itself. Cancellation cause A coroutine job is said to _complete exceptionally_ when its body throws an exception; a [CompletableJob] is completed exceptionally by calling [CompletableJob.completeExceptionally]. An exceptionally completed job is cancelled and the corresponding exception becomes the _cancellation cause_ of the job. Normal cancellation of a job is distinguished from its failure by the type of this exception that caused its cancellation. A coroutine that threw [CancellationException] is considered to be _cancelled normally_. If a cancellation cause is a different exception type, then the job is considered to have _failed_. When a job has _failed_, then its parent gets cancelled with the exception of the same type, thus ensuring transparency in delegating parts of the job to its children. Note, that [cancel] function on a job only accepts [CancellationException] as a cancellation cause, thus calling [cancel] always results in a normal cancellation of a job, which does not lead to cancellation of its parent. This way, a parent can [cancel] its own children (cancelling all their children recursively, too) without cancelling itself. Concurrency and synchronization All functions on this interface and on all interfaces derived from it are thread-safe and can be safely invoked from concurrent coroutines without external synchronization. Not stable for inheritance `Job` interface and all its derived interfaces are not stable for inheritance in 3rd party libraries, as new methods might be added to this interface in the future, but is stable for use." />
      <item value="Cannot access 'kotlin.coroutines.CoroutineContext' which is a supertype of 'kotlinx.coroutines.Job'. Check your module classpath for missing or conflicting dependencies&#10;Cannot access 'kotlin.coroutines.CoroutineContext.Element' which is a supertype of 'kotlinx.coroutines.Job'. Check your module classpath for missing or conflicting dependencies&#10;Suspend function 'cancelAndJoin' should be called only from a coroutine or another suspend function" />
      <item value="Binary XML file line 50: Error inflating class ImageView" />
      <item value="Unable to pause activity" />
      <item value="primitive" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="172" />
        <entry key="ENGLISH" value="173" />
        <entry key="CHINESE_TRADITIONAL" value="3" />
        <entry key="ALBANIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1621919520425" />
  </component>
</application>